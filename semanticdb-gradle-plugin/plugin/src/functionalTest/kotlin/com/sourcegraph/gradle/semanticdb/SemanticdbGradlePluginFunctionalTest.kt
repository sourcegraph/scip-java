/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sourcegraph.gradle.semanticdb

import java.io.File
import kotlin.test.assertTrue
import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.io.TempDir
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.ValueSource
import java.nio.file.Files
import java.util.stream.Stream
import kotlin.io.path.isRegularFile
import kotlin.test.assertEquals

/**
 * A simple functional test for the 'com.sourcegraph.gradle.semanticdb.greeting' plugin.
 */
class SemanticdbGradlePluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val javaFile by lazy { projectDir.resolve("src").resolve("main").resolve("java").resolve("App.java") }
    private val scalaFile by lazy { projectDir.resolve("src").resolve("main").resolve("scala").resolve("App.scala") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }
    @ParameterizedTest()
    @ValueSource(strings = [
        "7.3.1_8",
        "7.3.1_11",
        "7.3.1_17",
        "8.1.1_8",
        "8.1.1_11",
        "8.1.1_17"
    ])
    fun `java only project with toolchain`(versions: String) {
        var splits = versions.split('_')
        val gradleVersion = splits[0]
        val jvmToolchainVersion = splits[1]
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id 'java'
                id('com.sourcegraph.gradle.semanticdb')
            }
            
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of($jvmToolchainVersion)
                }
                
            }
        """.trimIndent())

        Files.createDirectories(javaFile.parentFile.toPath())

        javaFile.writeText("""
            /*
             * This Java source file was generated by the Gradle 'init' task.
             */
            package gradle.sample.project;

            public class App {
                public String getGreeting() {
                    return "Hello World!";
                }

                public static void main(String[] args) {
                    System.out.println(new App().getGreeting());
                }
            }
        """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("compileJava")
        runner.withProjectDir(projectDir)
        runner.withGradleVersion(gradleVersion)

        runner.run()

        val targetroot = projectDir.resolve("semanticdb-targetroot")
        val semanticdbFiles = java.nio.file.Files.walk(targetroot.toPath()).toList().filter { path -> path.toFile().isFile && path.fileName.toString().endsWith(".semanticdb") }

        assertEquals(1, semanticdbFiles.count())
    }

    @ParameterizedTest()
    @ValueSource(strings = [
        "7.3.1_8",
//        "7.3.1_11",
//        "7.3.1_17",
        "8.1.1_8",
//        "8.1.1_11",
//        "8.1.1_17"
    ])
    fun `mixed java and scala project`(versions: String) {
        var splits = versions.split('_')
        val gradleVersion = splits[0]
        val jvmToolchainVersion = splits[1]
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id 'java'
                id 'scala'
                id('com.sourcegraph.gradle.semanticdb')
            }
            
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of($jvmToolchainVersion)
                }
                
            }
            dependencies {
                implementation 'org.scala-lang:scala-library:2.13.10'
            }
        """.trimIndent())

        Files.createDirectories(javaFile.parentFile.toPath())
        Files.createDirectories(scalaFile.parentFile.toPath())

        javaFile.writeText("""
            package gradle.sample.project;

            public class App {
                public String getGreeting() {
                    return "Hello World!";
                }

                public static void main(String[] args) {
                    System.out.println(new App().getGreeting());
                }
            }
        """.trimIndent())

        scalaFile.writeText("""
           case class Hello(a: Int)
           object Hello {
                def x = 25
           }
        """.trimIndent())


        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("compileJava", "compileScala")
        runner.withProjectDir(projectDir)
        runner.withGradleVersion(gradleVersion)

        runner.run()

        val targetroot = projectDir.resolve("semanticdb-targetroot")
        val semanticdbFiles = java.nio.file.Files.walk(targetroot.toPath()).toList().filter { path -> path.toFile().isFile && path.fileName.toString().endsWith(".semanticdb") }
        println(semanticdbFiles.toList())

        assertEquals(2, semanticdbFiles.count())
    }
}
