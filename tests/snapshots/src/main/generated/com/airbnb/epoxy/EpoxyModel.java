package com.airbnb.epoxy;

import android.view.LayoutInflater;
//     ^^^^^^^ reference android/
//             ^^^^ reference android/view/
//                  ^^^^^^^^^^^^^^ reference android/view/LayoutInflater#
import android.view.View;
//     ^^^^^^^ reference android/
//             ^^^^ reference android/view/
//                  ^^^^ reference android/view/View#
import android.view.ViewGroup;
//     ^^^^^^^ reference android/
//             ^^^^ reference android/view/
//                  ^^^^^^^^^ reference android/view/ViewGroup#

import com.airbnb.epoxy.EpoxyController.ModelInterceptorCallback;
//     ^^^ reference com/
//         ^^^^^^ reference com/airbnb/
//                ^^^^^ reference com/airbnb/epoxy/
//                      ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                      ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#ModelInterceptorCallback#
import com.airbnb.epoxy.VisibilityState.Visibility;
//     ^^^ reference com/
//         ^^^^^^ reference com/airbnb/
//                ^^^^^ reference com/airbnb/epoxy/
//                      ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/VisibilityState#
//                                      ^^^^^^^^^^ reference com/airbnb/epoxy/VisibilityState#Visibility#

import java.util.List;
//     ^^^^ reference java/
//          ^^^^ reference java/util/
//               ^^^^ reference java/util/List#

import androidx.annotation.FloatRange;
//     ^^^^^^^^ reference androidx/
//              ^^^^^^^^^^ reference androidx/annotation/
//                         ^^^^^^^^^^ reference androidx/annotation/FloatRange#
import androidx.annotation.LayoutRes;
//     ^^^^^^^^ reference androidx/
//              ^^^^^^^^^^ reference androidx/annotation/
//                         ^^^^^^^^^ reference androidx/annotation/LayoutRes#
import androidx.annotation.NonNull;
//     ^^^^^^^^ reference androidx/
//              ^^^^^^^^^^ reference androidx/annotation/
//                         ^^^^^^^ reference androidx/annotation/NonNull#
import androidx.annotation.Nullable;
//     ^^^^^^^^ reference androidx/
//              ^^^^^^^^^^ reference androidx/annotation/
//                         ^^^^^^^^ reference androidx/annotation/Nullable#
import androidx.annotation.Px;
//     ^^^^^^^^ reference androidx/
//              ^^^^^^^^^^ reference androidx/annotation/
//                         ^^ reference androidx/annotation/Px#

import static com.airbnb.epoxy.IdUtils.hashLong64Bit;
//            ^^^ reference com/
//                ^^^^^^ reference com/airbnb/
//                       ^^^^^ reference com/airbnb/epoxy/
//                             ^^^^^^^ reference com/airbnb/epoxy/IdUtils#
import static com.airbnb.epoxy.IdUtils.hashString64Bit;
//            ^^^ reference com/
//                ^^^^^^ reference com/airbnb/
//                       ^^^^^ reference com/airbnb/epoxy/
//                             ^^^^^^^ reference com/airbnb/epoxy/IdUtils#

/**
 * Helper to bind data to a view using a builder style. The parameterized type should extend
 * Android's View or EpoxyHolder.
 *
 * @see EpoxyModelWithHolder
 * @see EpoxyModelWithView
 */
public abstract class EpoxyModel<T> {
//              ^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#

  /**
   * Counts how many of these objects are created, so that each new object can have a unique id .
   * Uses negative values so that these autogenerated ids don't clash with database ids that may be
   * set with {@link #id(long)}
   */
  private static long idCounter = -1;
//                    ^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#idCounter.

  /**
   * An id that can be used to uniquely identify this {@link EpoxyModel} for use in RecyclerView
   * stable ids. It defaults to a unique id for this object instance, if you want to maintain the
   * same id across instances use {@link #id(long)}
   */
  private long id;
//             ^^ definition com/airbnb/epoxy/EpoxyModel#id.
  @LayoutRes private int layout;
// ^^^^^^^^^ reference androidx/annotation/LayoutRes#
//                       ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#layout.
  private boolean shown = true;
//                ^^^^^ definition com/airbnb/epoxy/EpoxyModel#shown.
  /**
   * Set to true once this model is diffed in an adapter. Used to ensure that this model's id
   * doesn't change after being diffed.
   */
  boolean addedToAdapter;
//        ^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#addedToAdapter.
  /**
   * The first controller this model was added to. A reference is kept in debug mode in order to run
   * validations. The model is allowed to be added to other controllers, but we only keep a
   * reference to the first.
   */
  private EpoxyController firstControllerAddedTo;
//        ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                        ^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
  /**
   * Models are staged when they are changed. This allows them to be automatically added when they
   * are done being changed (eg the next model is changed/added or buildModels finishes). It is only
   * allowed for AutoModels, and only if implicit adding is enabled.
   */
  EpoxyController controllerToStageTo;
//^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                ^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
  private boolean currentlyInInterceptors;
//                ^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#currentlyInInterceptors.
  private int hashCodeWhenAdded;
//            ^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#hashCodeWhenAdded.
  private boolean hasDefaultId;
//                ^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#hasDefaultId.
  @Nullable private SpanSizeOverrideCallback spanSizeOverride;
// ^^^^^^^^ reference androidx/annotation/Nullable#
//                  ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#SpanSizeOverrideCallback#
//                                           ^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#spanSizeOverride.

  protected EpoxyModel(long id) {
//          ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#`<init>`().
//                          ^^ definition local0
    id(id);
//  ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//     ^^ reference local0
  }

  public EpoxyModel() {
//       ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#`<init>`(+1).
    this(idCounter--);
//  ^^^^ reference com/airbnb/epoxy/EpoxyModel#`<init>`().
//       ^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#idCounter.
    hasDefaultId = true;
//  ^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hasDefaultId.
  }

  boolean hasDefaultId() {
//        ^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#hasDefaultId().
    return hasDefaultId;
//         ^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hasDefaultId.
  }

  /**
   * Get the view type to associate with this model in the recyclerview. For models that use a
   * layout resource, the view type is simply the layout resource value by default.
   * <p>
   * If this returns 0 Epoxy will assign a unique view type for this model at run time.
   *
   * @see androidx.recyclerview.widget.RecyclerView.Adapter#getItemViewType(int)
   */
  protected int getViewType() {
//              ^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#getViewType().
    return getLayout();
//         ^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getLayout().
  }

  /**
   * Create and return a new instance of a view for this model. By default a view is created by
   * inflating the layout resource.
   */
  protected View buildView(@NonNull ViewGroup parent) {
//          ^^^^ reference _root_/
//               ^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#buildView().
//                          ^^^^^^^ reference androidx/annotation/NonNull#
//                                  ^^^^^^^^^ reference _root_/
//                                            ^^^^^^ definition local1
    return LayoutInflater.from(parent.getContext()).inflate(getLayout(), parent, false);
//         ^^^^^^^^^^^^^^ reference _root_/
//                        ^^^^ reference from#
//                             ^^^^^^ reference local1
//                                    ^^^^^^^^^^ reference getContext#
//                                                  ^^^^^^^ reference `<any>`#inflate#
//                                                          ^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getLayout().
//                                                                       ^^^^^^ reference local1
  }

  /**
   * Binds the current data to the given view. You should bind all fields including unset/empty
   * fields to ensure proper recycling.
   */
  public void bind(@NonNull T view) {
//            ^^^^ definition com/airbnb/epoxy/EpoxyModel#bind().
//                  ^^^^^^^ reference androidx/annotation/NonNull#
//                          ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                            ^^^^ definition local2

  }

  /**
   * Similar to {@link #bind(Object)}, but provides a non null, non empty list of payloads
   * describing what changed. This is the payloads list specified in the adapter's notifyItemChanged
   * method. This is a useful optimization to allow you to only change part of a view instead of
   * updating the whole thing, which may prevent unnecessary layout calls. If there are no payloads
   * then {@link #bind(Object)} is called instead. This will only be used if the model is used with
   * an {@link EpoxyAdapter}
   */
  public void bind(@NonNull T view, @NonNull List<Object> payloads) {
//            ^^^^ definition com/airbnb/epoxy/EpoxyModel#bind(+1).
//                  ^^^^^^^ reference androidx/annotation/NonNull#
//                          ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                            ^^^^ definition local3
//                                   ^^^^^^^ reference androidx/annotation/NonNull#
//                                           ^^^^ reference java/util/List#
//                                                ^^^^^^ reference java/lang/Object#
//                                                        ^^^^^^^^ definition local4
    bind(view);
//  ^^^^ reference com/airbnb/epoxy/EpoxyModel#bind().
//       ^^^^ reference local3
  }

  /**
   * Similar to {@link #bind(Object)}, but provides a non null model which was previously bound to
   * this view. This will only be called if the model is used with an {@link EpoxyController}.
   *
   * @param previouslyBoundModel This is a model with the same id that was previously bound. You can
   *                             compare this previous model with the current one to see exactly
   *                             what changed.
   *                             <p>
   *                             This model and the previously bound model are guaranteed to have
   *                             the same id, but will not necessarily be of the same type depending
   *                             on your implementation of {@link EpoxyController#buildModels()}.
   *                             With common usage patterns of Epoxy they should be the same type,
   *                             and will only differ if you are using different model classes with
   *                             the same id.
   *                             <p>
   *                             Comparing the newly bound model with the previous model allows you
   *                             to be more intelligent when binding your view. This may help you
   *                             optimize view binding, or make it easier to work with animations.
   *                             <p>
   *                             If the new model and the previous model have the same view type
   *                             (given by {@link EpoxyModel#getViewType()}), and if you are using
   *                             the default ReyclerView item animator, the same view will be
   *                             reused. This means that you only need to update the view to reflect
   *                             the data that changed. If you are using a custom item animator then
   *                             the view will be the same if the animator returns true in
   *                             canReuseUpdatedViewHolder.
   *                             <p>
   *                             This previously bound model is taken as a payload from the diffing
   *                             process, and follows the same general conditions for all
   *                             recyclerview change payloads.
   */
  public void bind(@NonNull T view, @NonNull EpoxyModel<?> previouslyBoundModel) {
//            ^^^^ definition com/airbnb/epoxy/EpoxyModel#bind(+2).
//                  ^^^^^^^ reference androidx/annotation/NonNull#
//                          ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                            ^^^^ definition local5
//                                   ^^^^^^^ reference androidx/annotation/NonNull#
//                                           ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                                                         ^^^^^^^^^^^^^^^^^^^^ definition local6
    bind(view);
//  ^^^^ reference com/airbnb/epoxy/EpoxyModel#bind().
//       ^^^^ reference local5
  }

  /**
   * Called when the view bound to this model is recycled. Subclasses can override this if their
   * view should release resources when it's recycled.
   * <p>
   * Note that {@link #bind(Object)} can be called multiple times without an unbind call in between
   * if the view has remained on screen to be reused across item changes. This means that you should
   * not rely on unbind to clear a view or model's state before bind is called again.
   *
   * @see EpoxyAdapter#onViewRecycled(EpoxyViewHolder)
   */
  public void unbind(@NonNull T view) {
//            ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#unbind().
//                    ^^^^^^^ reference androidx/annotation/NonNull#
//                            ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                              ^^^^ definition local7
  }

  /**
   * TODO link to the wiki
   *
   * @see OnVisibilityStateChanged annotation
   */
  public void onVisibilityStateChanged(@Visibility int visibilityState, @NonNull T view) {
//            ^^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onVisibilityStateChanged().
//                                      ^^^^^^^^^^ reference com/airbnb/epoxy/VisibilityState#Visibility#
//                                                     ^^^^^^^^^^^^^^^ definition local8
//                                                                       ^^^^^^^ reference androidx/annotation/NonNull#
//                                                                               ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                                                                                 ^^^^ definition local9
  }

  /**
   * TODO link to the wiki
   *
   * @see OnVisibilityChanged annotation
   */
  public void onVisibilityChanged(
//            ^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onVisibilityChanged().
      @FloatRange(from = 0.0f, to = 100.0f) float percentVisibleHeight,
//     ^^^^^^^^^^ reference androidx/annotation/FloatRange#
//                ^^^^ reference androidx/annotation/FloatRange#from().
//                             ^^ reference androidx/annotation/FloatRange#to().
//                                                ^^^^^^^^^^^^^^^^^^^^ definition local10
      @FloatRange(from = 0.0f, to = 100.0f) float percentVisibleWidth,
//     ^^^^^^^^^^ reference androidx/annotation/FloatRange#
//                ^^^^ reference androidx/annotation/FloatRange#from().
//                             ^^ reference androidx/annotation/FloatRange#to().
//                                                ^^^^^^^^^^^^^^^^^^^ definition local11
      @Px int visibleHeight,
//     ^^ reference androidx/annotation/Px#
//            ^^^^^^^^^^^^^ definition local12
      @Px int visibleWidth,
//     ^^ reference androidx/annotation/Px#
//            ^^^^^^^^^^^^ definition local13
      @NonNull T view
//     ^^^^^^^ reference androidx/annotation/NonNull#
//             ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//               ^^^^ definition local14
  ) {
  }

  public long id() {
//            ^^ definition com/airbnb/epoxy/EpoxyModel#id().
    return id;
//         ^^ reference com/airbnb/epoxy/EpoxyModel#id.
  }

  /**
   * Override the default id in cases where the data subject naturally has an id, like an object
   * from a database. This id can only be set before the model is added to the adapter, it is an
   * error to change the id after that.
   */
  public EpoxyModel<T> id(long id) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+1).
//                             ^^ definition local15
    if ((addedToAdapter || firstControllerAddedTo != null) && id != this.id) {
//       ^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#addedToAdapter.
//                         ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
//                                                            ^^ reference local15
//                                                                  ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//                                                                       ^^ reference com/airbnb/epoxy/EpoxyModel#id.
      throw new IllegalEpoxyUsage(
//          ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IllegalEpoxyUsage#`<init>`(). 1:79
//              ^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IllegalEpoxyUsage#
          "Cannot change a model's id after it has been added to the adapter.");
    }

    hasDefaultId = false;
//  ^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hasDefaultId.
    this.id = id;
//  ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//       ^^ reference com/airbnb/epoxy/EpoxyModel#id.
//            ^^ reference local15
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Use multiple numbers as the id for this model. Useful when you don't have a single long that
   * represents a unique id.
   * <p>
   * This hashes the numbers, so there is a tiny risk of collision with other ids.
   */
  public EpoxyModel<T> id(@Nullable Number... ids) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+2).
//                         ^^^^^^^^ reference androidx/annotation/Nullable#
//                                  ^^^^^^ reference java/lang/Number#
//                                            ^^^ definition local16
    long result = 0;
//       ^^^^^^ definition local17
    if (ids != null) {
//      ^^^ reference local16
      for (@Nullable Number id : ids) {
//          ^^^^^^^^ reference androidx/annotation/Nullable#
//                   ^^^^^^ reference java/lang/Number#
//                          ^^ definition local18
//                               ^^^ reference local16
        result = 31 * result + hashLong64Bit(id == null ? 0 : id.hashCode());
//      ^^^^^^ reference local17
//                    ^^^^^^ reference local17
//                             ^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashLong64Bit().
//                                           ^^ reference local18
//                                                            ^^ reference local18
//                                                               ^^^^^^^^ reference java/lang/Object#hashCode().
      }
    }
    return id(result);
//         ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//            ^^^^^^ reference local17
  }

  /**
   * Use two numbers as the id for this model. Useful when you don't have a single long that
   * represents a unique id.
   * <p>
   * This hashes the two numbers, so there is a tiny risk of collision with other ids.
   */
  public EpoxyModel<T> id(long id1, long id2) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+3).
//                             ^^^ definition local19
//                                       ^^^ definition local20
    long result = hashLong64Bit(id1);
//       ^^^^^^ definition local21
//                ^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashLong64Bit().
//                              ^^^ reference local19
    result = 31 * result + hashLong64Bit(id2);
//  ^^^^^^ reference local21
//                ^^^^^^ reference local21
//                         ^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashLong64Bit().
//                                       ^^^ reference local20
    return id(result);
//         ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//            ^^^^^^ reference local21
  }

  /**
   * Use a string as the model id. Useful for models that don't clearly map to a numerical id. This
   * is preferable to using {@link String#hashCode()} because that is a 32 bit hash and this is a 64
   * bit hash, giving better spread and less chance of collision with other ids.
   * <p>
   * Since this uses a hashcode method to convert the String to a long there is a very small chance
   * that you may have a collision with another id. Assuming an even spread of hashcodes, and
   * several hundred models in the adapter, there would be roughly 1 in 100 trillion chance of a
   * collision. (http://preshing.com/20110504/hash-collision-probabilities/)
   *
   * @see IdUtils#hashString64Bit(CharSequence)
   */
  public EpoxyModel<T> id(@Nullable CharSequence key) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+4).
//                         ^^^^^^^^ reference androidx/annotation/Nullable#
//                                  ^^^^^^^^^^^^ reference java/lang/CharSequence#
//                                               ^^^ definition local22
    id(hashString64Bit(key));
//  ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//     ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashString64Bit().
//                     ^^^ reference local22
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Use several strings to define the id of the model.
   * <p>
   * Similar to {@link #id(CharSequence)}, but with additional strings.
   */
  public EpoxyModel<T> id(@Nullable CharSequence key, @Nullable CharSequence... otherKeys) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+5).
//                         ^^^^^^^^ reference androidx/annotation/Nullable#
//                                  ^^^^^^^^^^^^ reference java/lang/CharSequence#
//                                               ^^^ definition local23
//                                                     ^^^^^^^^ reference androidx/annotation/Nullable#
//                                                              ^^^^^^^^^^^^ reference java/lang/CharSequence#
//                                                                              ^^^^^^^^^ definition local24
    long result = hashString64Bit(key);
//       ^^^^^^ definition local25
//                ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashString64Bit().
//                                ^^^ reference local23
    if (otherKeys != null) {
//      ^^^^^^^^^ reference local24
      for (CharSequence otherKey : otherKeys) {
//         ^^^^^^^^^^^^ reference java/lang/CharSequence#
//                      ^^^^^^^^ definition local26
//                                 ^^^^^^^^^ reference local24
        result = 31 * result + hashString64Bit(otherKey);
//      ^^^^^^ reference local25
//                    ^^^^^^ reference local25
//                             ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashString64Bit().
//                                             ^^^^^^^^ reference local26
      }
    }
    return id(result);
//         ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//            ^^^^^^ reference local25
  }

  /**
   * Set an id that is namespaced with a string. This is useful when you need to show models of
   * multiple types, side by side and don't want to risk id collisions.
   * <p>
   * Since this uses a hashcode method to convert the String to a long there is a very small chance
   * that you may have a collision with another id. Assuming an even spread of hashcodes, and
   * several hundred models in the adapter, there would be roughly 1 in 100 trillion chance of a
   * collision. (http://preshing.com/20110504/hash-collision-probabilities/)
   *
   * @see IdUtils#hashString64Bit(CharSequence)
   * @see IdUtils#hashLong64Bit(long)
   */
  public EpoxyModel<T> id(@Nullable CharSequence key, long id) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^ definition com/airbnb/epoxy/EpoxyModel#id(+6).
//                         ^^^^^^^^ reference androidx/annotation/Nullable#
//                                  ^^^^^^^^^^^^ reference java/lang/CharSequence#
//                                               ^^^ definition local27
//                                                         ^^ definition local28
    long result = hashString64Bit(key);
//       ^^^^^^ definition local29
//                ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashString64Bit().
//                                ^^^ reference local27
    result = 31 * result + hashLong64Bit(id);
//  ^^^^^^ reference local29
//                ^^^^^^ reference local29
//                         ^^^^^^^^^^^^^ reference com/airbnb/epoxy/IdUtils#hashLong64Bit().
//                                       ^^ reference local28
    id(result);
//  ^^ reference com/airbnb/epoxy/EpoxyModel#id(+1).
//     ^^^^^^ reference local29
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Return the default layout resource to be used when creating views for this model. The resource
   * will be inflated to create a view for the model; additionally the layout int is used as the
   * views type in the RecyclerView.
   * <p>
   * This can be left unimplemented if you use the {@link EpoxyModelClass} annotation to define a
   * layout.
   * <p>
   * This default value can be overridden with {@link #layout(int)} at runtime to change the layout
   * dynamically.
   */
  @LayoutRes
// ^^^^^^^^^ reference androidx/annotation/LayoutRes#
  protected abstract int getDefaultLayout();
//                       ^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#getDefaultLayout().

  @NonNull
// ^^^^^^^ reference androidx/annotation/NonNull#
  public EpoxyModel<T> layout(@LayoutRes int layoutRes) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#layout().
//                             ^^^^^^^^^ reference androidx/annotation/LayoutRes#
//                                           ^^^^^^^^^ definition local30
    onMutation();
//  ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#onMutation().
    layout = layoutRes;
//  ^^^^^^ reference com/airbnb/epoxy/EpoxyModel#layout.
//           ^^^^^^^^^ reference local30
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  @LayoutRes
// ^^^^^^^^^ reference androidx/annotation/LayoutRes#
  public final int getLayout() {
//                 ^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#getLayout().
    if (layout == 0) {
//      ^^^^^^ reference com/airbnb/epoxy/EpoxyModel#layout.
      return getDefaultLayout();
//           ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getDefaultLayout().
    }

    return layout;
//         ^^^^^^ reference com/airbnb/epoxy/EpoxyModel#layout.
  }

  /**
   * Sets fields of the model to default ones.
   */
  @NonNull
// ^^^^^^^ reference androidx/annotation/NonNull#
  public EpoxyModel<T> reset() {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^^ definition com/airbnb/epoxy/EpoxyModel#reset().
    onMutation();
//  ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#onMutation().

    layout = 0;
//  ^^^^^^ reference com/airbnb/epoxy/EpoxyModel#layout.
    shown = true;
//  ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.

    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Add this model to the given controller. Can only be called from inside {@link
   * EpoxyController#buildModels()}.
   */
  public void addTo(@NonNull EpoxyController controller) {
//            ^^^^^ definition com/airbnb/epoxy/EpoxyModel#addTo().
//                   ^^^^^^^ reference androidx/annotation/NonNull#
//                           ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                           ^^^^^^^^^^ definition local31
    controller.addInternal(this);
//  ^^^^^^^^^^ reference local31
//             ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#addInternal().
//                         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Add this model to the given controller if the condition is true. Can only be called from inside
   * {@link EpoxyController#buildModels()}.
   */
  public void addIf(boolean condition, @NonNull EpoxyController controller) {
//            ^^^^^ definition com/airbnb/epoxy/EpoxyModel#addIf().
//                          ^^^^^^^^^ definition local32
//                                      ^^^^^^^ reference androidx/annotation/NonNull#
//                                              ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                              ^^^^^^^^^^ definition local33
    if (condition) {
//      ^^^^^^^^^ reference local32
      addTo(controller);
//    ^^^^^ reference com/airbnb/epoxy/EpoxyModel#addTo().
//          ^^^^^^^^^^ reference local33
    } else if (controllerToStageTo != null) {
//             ^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
      // Clear this model from staging since it failed the add condition. If this model wasn't
      // staged (eg not changed before addIf was called, then we need to make sure to add the
      // previously staged model.
      controllerToStageTo.clearModelFromStaging(this);
//    ^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
//                        ^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#clearModelFromStaging().
//                                              ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
      controllerToStageTo = null;
//    ^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
    }
  }

  /**
   * Add this model to the given controller if the {@link AddPredicate} return true. Can only be
   * called from inside {@link EpoxyController#buildModels()}.
   */
  public void addIf(@NonNull AddPredicate predicate, @NonNull EpoxyController controller) {
//            ^^^^^ definition com/airbnb/epoxy/EpoxyModel#addIf(+1).
//                   ^^^^^^^ reference androidx/annotation/NonNull#
//                           ^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#AddPredicate#
//                                        ^^^^^^^^^ definition local34
//                                                    ^^^^^^^ reference androidx/annotation/NonNull#
//                                                            ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                                            ^^^^^^^^^^ definition local35
    addIf(predicate.addIf(), controller);
//  ^^^^^ reference com/airbnb/epoxy/EpoxyModel#addIf().
//        ^^^^^^^^^ reference local34
//                  ^^^^^ reference com/airbnb/epoxy/EpoxyModel#AddPredicate#addIf().
//                           ^^^^^^^^^^ reference local35
  }

  /**
   * @see #addIf(AddPredicate, EpoxyController)
   */
  public interface AddPredicate {
//       ^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#AddPredicate#
    boolean addIf();
//          ^^^^^ definition com/airbnb/epoxy/EpoxyModel#AddPredicate#addIf().
  }

  /**
   * This is used internally by generated models to turn on validation checking when
   * "validateEpoxyModelUsage" is enabled and the model is used with an {@link EpoxyController}.
   */
  protected final void addWithDebugValidation(@NonNull EpoxyController controller) {
//                     ^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#addWithDebugValidation().
//                                             ^^^^^^^ reference androidx/annotation/NonNull#
//                                                     ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                                     ^^^^^^^^^^ definition local36
    if (controller == null) {
//      ^^^^^^^^^^ reference local36
      throw new IllegalArgumentException("Controller cannot be null");
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference java/lang/IllegalArgumentException#`<init>`(+1).
//              ^^^^^^^^^^^^^^^^^^^^^^^^ reference java/lang/IllegalArgumentException#
    }

    if (controller.isModelAddedMultipleTimes(this)) {
//      ^^^^^^^^^^ reference local36
//                 ^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#isModelAddedMultipleTimes().
//                                           ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
      throw new IllegalEpoxyUsage(
//          ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IllegalEpoxyUsage#`<init>`(). 2:68
//              ^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/IllegalEpoxyUsage#
          "This model was already added to the controller at position "
              + controller.getFirstIndexOfModelInBuildingList(this));
//              ^^^^^^^^^^ reference local36
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#getFirstIndexOfModelInBuildingList().
//                                                            ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
    }

    if (firstControllerAddedTo == null) {
//      ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
      firstControllerAddedTo = controller;
//    ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
//                             ^^^^^^^^^^ reference local36

      // We save the current hashCode so we can compare it to the hashCode at later points in time
      // in order to validate that it doesn't change and enforce mutability.
      hashCodeWhenAdded = hashCode();
//    ^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCodeWhenAdded.
//                        ^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCode().

      // The one time it is valid to change the model is during an interceptor callback. To support
      // that we need to update the hashCode after interceptors have been run.
      // The model can be added to multiple controllers, but we only allow an interceptor change
      // the first time, since after that it will have been added to an adapter.
      controller.addAfterInterceptorCallback(new ModelInterceptorCallback() {
//    ^^^^^^^^^^ reference local36
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#addAfterInterceptorCallback().
//                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference local38 11:7
//                                               ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#ModelInterceptorCallback#
//                                               ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#ModelInterceptorCallback#
//                                                                          ^ definition local38 1:4
        @Override
//       ^^^^^^^^ reference java/lang/Override#
        public void onInterceptorsStarted(EpoxyController controller) {
//                  ^^^^^^^^^^^^^^^^^^^^^ definition local39
//                                        ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                        ^^^^^^^^^^ definition local40
          currentlyInInterceptors = true;
//        ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#currentlyInInterceptors.
        }

        @Override
//       ^^^^^^^^ reference java/lang/Override#
        public void onInterceptorsFinished(EpoxyController controller) {
//                  ^^^^^^^^^^^^^^^^^^^^^^ definition local41
//                                         ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                         ^^^^^^^^^^ definition local42
          hashCodeWhenAdded = EpoxyModel.this.hashCode();
//        ^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCodeWhenAdded.
//                            ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                                       ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//                                            ^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCode().
          currentlyInInterceptors = false;
//        ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#currentlyInInterceptors.
        }
      });
    }
  }

  boolean isDebugValidationEnabled() {
//        ^^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#isDebugValidationEnabled().
    return firstControllerAddedTo != null;
//         ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
  }

  /**
   * This is used internally by generated models to do validation checking when
   * "validateEpoxyModelUsage" is enabled and the model is used with an {@link EpoxyController}.
   * This method validates that it is ok to change this model. It is only valid if the model hasn't
   * yet been added, or the change is being done from an {@link EpoxyController.Interceptor}
   * callback.
   * <p>
   * This is also used to stage the model for implicitly adding it, if it is an AutoModel and
   * implicit adding is enabled.
   */
  protected final void onMutation() {
//                     ^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onMutation().
    // The model may be added to multiple controllers, in which case if it was already diffed
    // and added to an adapter in one controller we don't want to even allow interceptors
    // from changing the model in a different controller
    if (isDebugValidationEnabled() && !currentlyInInterceptors) {
//      ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#isDebugValidationEnabled().
//                                     ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#currentlyInInterceptors.
      throw new ImmutableModelException(this,
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/ImmutableModelException#`<init>`(). 1:52
//              ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/ImmutableModelException#
//                                      ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
          getPosition(firstControllerAddedTo, this));
//        ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getPosition().
//                    ^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#firstControllerAddedTo.
//                                            ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
    }

    if (controllerToStageTo != null) {
//      ^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
      controllerToStageTo.setStagedModel(this);
//    ^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#controllerToStageTo.
//                        ^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#setStagedModel().
//                                       ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
    }
  }

  private static int getPosition(@NonNull EpoxyController controller,
//                   ^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#getPosition().
//                                ^^^^^^^ reference androidx/annotation/NonNull#
//                                        ^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#
//                                                        ^^^^^^^^^^ definition local43
      @NonNull EpoxyModel<?> model) {
//     ^^^^^^^ reference androidx/annotation/NonNull#
//             ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                           ^^^^^ definition local44
    // If the model was added to multiple controllers, or was removed from the controller and then
    // modified, this won't be correct. But those should be very rare cases that we don't need to
    // worry about
    if (controller.isBuildingModels()) {
//      ^^^^^^^^^^ reference local43
//                 ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#isBuildingModels().
      return controller.getFirstIndexOfModelInBuildingList(model);
//           ^^^^^^^^^^ reference local43
//                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#getFirstIndexOfModelInBuildingList().
//                                                         ^^^^^ reference local44
    }

    return controller.getAdapter().getModelPosition(model);
//         ^^^^^^^^^^ reference local43
//                    ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyController#getAdapter().
//                                 ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyControllerAdapter#getModelPosition().
//                                                  ^^^^^ reference local44
  }

  /**
   * This is used internally by generated models to do validation checking when
   * "validateEpoxyModelUsage" is enabled and the model is used with a {@link EpoxyController}. This
   * method validates that the model's hashCode hasn't been changed since it was added to the
   * controller. This is similar to {@link #onMutation()}, but that method is only used for
   * specific model changes such as calling a setter. By checking the hashCode, this method allows
   * us to catch more subtle changes, such as through setting a field directly or through changing
   * an object that is set on the model.
   */
  protected final void validateStateHasNotChangedSinceAdded(String descriptionOfChange,
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#validateStateHasNotChangedSinceAdded().
//                                                          ^^^^^^ reference java/lang/String#
//                                                                 ^^^^^^^^^^^^^^^^^^^ definition local45
      int modelPosition) {
//        ^^^^^^^^^^^^^ definition local46
    if (isDebugValidationEnabled()
//      ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#isDebugValidationEnabled().
        && !currentlyInInterceptors
//          ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#currentlyInInterceptors.
        && hashCodeWhenAdded != hashCode()) {
//         ^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCodeWhenAdded.
//                              ^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#hashCode().
      throw new ImmutableModelException(this, descriptionOfChange, modelPosition);
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/ImmutableModelException#`<init>`(+1).
//              ^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/ImmutableModelException#
//                                      ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//                                            ^^^^^^^^^^^^^^^^^^^ reference local45
//                                                                 ^^^^^^^^^^^^^ reference local46
    }
  }

  @Override
// ^^^^^^^^ reference java/lang/Override#
  public boolean equals(Object o) {
//               ^^^^^^ definition com/airbnb/epoxy/EpoxyModel#equals().
//                      ^^^^^^ reference java/lang/Object#
//                             ^ definition local47
    if (this == o) {
//      ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//              ^ reference local47
      return true;
    }
    if (!(o instanceof EpoxyModel)) {
//        ^ reference local47
//                     ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
      return false;
    }

    EpoxyModel<?> that = (EpoxyModel<?>) o;
//  ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                ^^^^ definition local48
//                        ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                                       ^ reference local47

    if (id != that.id) {
//      ^^ reference com/airbnb/epoxy/EpoxyModel#id.
//            ^^^^ reference local48
//                 ^^ reference com/airbnb/epoxy/EpoxyModel#id.
      return false;
    }
    if (getViewType() != that.getViewType()) {
//      ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getViewType().
//                       ^^^^ reference local48
//                            ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getViewType().
      return false;
    }
    return shown == that.shown;
//         ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
//                  ^^^^ reference local48
//                       ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
  }

  @Override
// ^^^^^^^^ reference java/lang/Override#
  public int hashCode() {
//           ^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#hashCode().
    int result = (int) (id ^ (id >>> 32));
//      ^^^^^^ definition local49
//                      ^^ reference com/airbnb/epoxy/EpoxyModel#id.
//                            ^^ reference com/airbnb/epoxy/EpoxyModel#id.
    result = 31 * result + getViewType();
//  ^^^^^^ reference local49
//                ^^^^^^ reference local49
//                         ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getViewType().
    result = 31 * result + (shown ? 1 : 0);
//  ^^^^^^ reference local49
//                ^^^^^^ reference local49
//                          ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
    return result;
//         ^^^^^^ reference local49
  }

  /**
   * Subclasses can override this if they want their view to take up more than one span in a grid
   * layout.
   *
   * @param totalSpanCount The number of spans in the grid
   * @param position       The position of the model
   * @param itemCount      The total number of items in the adapter
   */
  public int getSpanSize(int totalSpanCount, int position, int itemCount) {
//           ^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#getSpanSize().
//                           ^^^^^^^^^^^^^^ definition local50
//                                               ^^^^^^^^ definition local51
//                                                             ^^^^^^^^^ definition local52
    return 1;
  }

  public EpoxyModel<T> spanSizeOverride(@Nullable SpanSizeOverrideCallback spanSizeCallback) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#spanSizeOverride().
//                                       ^^^^^^^^ reference androidx/annotation/Nullable#
//                                                ^^^^^^^^^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#SpanSizeOverrideCallback#
//                                                                         ^^^^^^^^^^^^^^^^ definition local53
    this.spanSizeOverride = spanSizeCallback;
//  ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
//       ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#spanSizeOverride.
//                          ^^^^^^^^^^^^^^^^ reference local53
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  public interface SpanSizeOverrideCallback {
//       ^^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#SpanSizeOverrideCallback#
    int getSpanSize(int totalSpanCount, int position, int itemCount);
//      ^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#SpanSizeOverrideCallback#getSpanSize().
//                      ^^^^^^^^^^^^^^ definition local54
//                                          ^^^^^^^^ definition local55
//                                                        ^^^^^^^^^ definition local56
  }

  /**
   * Returns the actual span size of this model, using the {@link SpanSizeOverrideCallback} if one
   * was set, otherwise using the value from {@link #getSpanSize(int, int, int)}
   */
  public final int spanSize(int totalSpanCount, int position, int itemCount) {
//                 ^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#spanSize().
//                              ^^^^^^^^^^^^^^ definition local57
//                                                  ^^^^^^^^ definition local58
//                                                                ^^^^^^^^^ definition local59
    if (spanSizeOverride != null) {
//      ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#spanSizeOverride.
      return spanSizeOverride.getSpanSize(totalSpanCount, position, itemCount);
//           ^^^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#spanSizeOverride.
//                            ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#SpanSizeOverrideCallback#getSpanSize().
//                                        ^^^^^^^^^^^^^^ reference local57
//                                                        ^^^^^^^^ reference local58
//                                                                  ^^^^^^^^^ reference local59
    }

    return getSpanSize(totalSpanCount, position, itemCount);
//         ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getSpanSize().
//                     ^^^^^^^^^^^^^^ reference local57
//                                     ^^^^^^^^ reference local58
//                                               ^^^^^^^^^ reference local59
  }

  /**
   * Change the visibility of the model so that it's view is shown. This only works if the model is
   * used in {@link EpoxyAdapter} or a {@link EpoxyModelGroup}, but is not supported in {@link
   * EpoxyController}
   */
  @NonNull
// ^^^^^^^ reference androidx/annotation/NonNull#
  public EpoxyModel<T> show() {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^ definition com/airbnb/epoxy/EpoxyModel#show().
    return show(true);
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#show(+1).
  }

  /**
   * Change the visibility of the model's view. This only works if the model is
   * used in {@link EpoxyAdapter} or a {@link EpoxyModelGroup}, but is not supported in {@link
   * EpoxyController}
   */
  @NonNull
// ^^^^^^^ reference androidx/annotation/NonNull#
  public EpoxyModel<T> show(boolean show) {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^ definition com/airbnb/epoxy/EpoxyModel#show(+1).
//                                  ^^^^ definition local60
    onMutation();
//  ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#onMutation().
    shown = show;
//  ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
//          ^^^^ reference local60
    return this;
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#this.
  }

  /**
   * Change the visibility of the model so that it's view is hidden. This only works if the model is
   * used in {@link EpoxyAdapter} or a {@link EpoxyModelGroup}, but is not supported in {@link
   * EpoxyController}
   */
  @NonNull
// ^^^^^^^ reference androidx/annotation/NonNull#
  public EpoxyModel<T> hide() {
//       ^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#
//                  ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                     ^^^^ definition com/airbnb/epoxy/EpoxyModel#hide().
    return show(false);
//         ^^^^ reference com/airbnb/epoxy/EpoxyModel#show(+1).
  }

  /**
   * Whether the model's view should be shown on screen. If false it won't be inflated and drawn,
   * and will be like it was never added to the recycler view.
   */
  public boolean isShown() {
//               ^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#isShown().
    return shown;
//         ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
  }

  /**
   * Whether the adapter should save the state of the view bound to this model.
   */
  public boolean shouldSaveViewState() {
//               ^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#shouldSaveViewState().
    return false;
  }

  /**
   * Called if the RecyclerView failed to recycle this model's view. You can take this opportunity
   * to clear the animation(s) that affect the View's transient state and return <code>true</code>
   * so that the View can be recycled. Keep in mind that the View in question is already removed
   * from the RecyclerView.
   *
   * @return True if the View should be recycled, false otherwise
   * @see EpoxyAdapter#onFailedToRecycleView(androidx.recyclerview.widget.RecyclerView.ViewHolder)
   */
  public boolean onFailedToRecycleView(@NonNull T view) {
//               ^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onFailedToRecycleView().
//                                      ^^^^^^^ reference androidx/annotation/NonNull#
//                                              ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                                                ^^^^ definition local61
    return false;
  }

  /**
   * Called when this model's view is attached to the window.
   *
   * @see EpoxyAdapter#onViewAttachedToWindow(androidx.recyclerview.widget.RecyclerView.ViewHolder)
   */
  public void onViewAttachedToWindow(@NonNull T view) {
//            ^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onViewAttachedToWindow().
//                                    ^^^^^^^ reference androidx/annotation/NonNull#
//                                            ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                                              ^^^^ definition local62

  }

  /**
   * Called when this model's view is detached from the the window.
   *
   * @see EpoxyAdapter#onViewDetachedFromWindow(androidx.recyclerview.widget.RecyclerView
   * .ViewHolder)
   */
  public void onViewDetachedFromWindow(@NonNull T view) {
//            ^^^^^^^^^^^^^^^^^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#onViewDetachedFromWindow().
//                                      ^^^^^^^ reference androidx/annotation/NonNull#
//                                              ^ reference com/airbnb/epoxy/EpoxyModel#[T]
//                                                ^^^^ definition local63

  }

  @Override
// ^^^^^^^^ reference java/lang/Override#
  public String toString() {
//       ^^^^^^ reference java/lang/String#
//              ^^^^^^^^ definition com/airbnb/epoxy/EpoxyModel#toString().
    return getClass().getSimpleName() + "{"
//         ^^^^^^^^ reference java/lang/Object#getClass().
//                    ^^^^^^^^^^^^^ reference java/lang/Class#getSimpleName().
        + "id=" + id
//                ^^ reference com/airbnb/epoxy/EpoxyModel#id.
        + ", viewType=" + getViewType()
//                        ^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#getViewType().
        + ", shown=" + shown
//                     ^^^^^ reference com/airbnb/epoxy/EpoxyModel#shown.
        + ", addedToAdapter=" + addedToAdapter
//                              ^^^^^^^^^^^^^^ reference com/airbnb/epoxy/EpoxyModel#addedToAdapter.
        + '}';
  }
}
